{"ast":null,"code":"import { useCallback, useState, useEffect } from \"react\";\n\nconst useDraggable = ({\n  onDrag,\n  onDragEnd\n} = {}) => {\n  const [pos, setPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isDragging, setDragging] = useState(false);\n  const handleMouseDown = useCallback(() => setDragging(true), []);\n  const handleMouseMove = useCallback(({\n    movementX,\n    movementY\n  }) => {\n    if (!isDragging) return;\n    const translation = {\n      x: pos.x + movementX,\n      y: pos.y + movementY\n    };\n    setPos(translation);\n    onDrag === null || onDrag === void 0 ? void 0 : onDrag(translation);\n  }, [isDragging, pos.x, pos.y, onDrag]);\n  const handleMouseUp = useCallback(() => {\n    setDragging(false);\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(pos);\n  }, [onDragEnd, pos]);\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [handleMouseMove, handleMouseUp]);\n  return {\n    position: pos,\n    drag: handleMouseDown\n  };\n};\n\nexport default useDraggable;","map":{"version":3,"sources":["/Users/mikaelbrevik/Sites/variant/styleguide/web/src/components/svg-blob/draggable.tsx"],"names":["useCallback","useState","useEffect","useDraggable","onDrag","onDragEnd","pos","setPos","x","y","isDragging","setDragging","handleMouseDown","handleMouseMove","movementX","movementY","translation","handleMouseUp","window","addEventListener","removeEventListener","position","drag"],"mappings":"AAAA,SAAgBA,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,QAAwD,OAAxD;;AAeA,MAAMC,YAAY,GAAG,CAAoB;AACvCC,EAAAA,MADuC;AAEvCC,EAAAA;AAFuC,IAGnB,EAHD,KAGuB;AAC1C,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAW;AAAEO,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAX,CAA9B;AACA,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BV,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAMW,eAAe,GAAGZ,WAAW,CAAC,MAAMW,WAAW,CAAC,IAAD,CAAlB,EAA0B,EAA1B,CAAnC;AAEA,QAAME,eAAe,GAAGb,WAAW,CACjC,CAAC;AAAEc,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAD,KAA0C;AACxC,QAAI,CAACL,UAAL,EAAiB;AACjB,UAAMM,WAAW,GAAG;AAClBR,MAAAA,CAAC,EAAEF,GAAG,CAACE,CAAJ,GAAQM,SADO;AAElBL,MAAAA,CAAC,EAAEH,GAAG,CAACG,CAAJ,GAAQM;AAFO,KAApB;AAKAR,IAAAA,MAAM,CAACS,WAAD,CAAN;AACAZ,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAGY,WAAH,CAAN;AACD,GAVgC,EAWjC,CAACN,UAAD,EAAaJ,GAAG,CAACE,CAAjB,EAAoBF,GAAG,CAACG,CAAxB,EAA2BL,MAA3B,CAXiC,CAAnC;AAcA,QAAMa,aAAa,GAAGjB,WAAW,CAAC,MAAM;AACtCW,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAN,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAGC,GAAH,CAAT;AACD,GAHgC,EAG9B,CAACD,SAAD,EAAYC,GAAZ,CAH8B,CAAjC;AAKAJ,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqCN,eAArC;AACAK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCF,aAAnC;AAEA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,WAA3B,EAAwCP,eAAxC;AACAK,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCH,aAAtC;AACD,KAHD;AAID,GARQ,EAQN,CAACJ,eAAD,EAAkBI,aAAlB,CARM,CAAT;AAUA,SAAO;AAAEI,IAAAA,QAAQ,EAAEf,GAAZ;AAAiBgB,IAAAA,IAAI,EAAEV;AAAvB,GAAP;AACD,CAtCD;;AAwCA,eAAeT,YAAf","sourcesContent":["import React, { useCallback, useState, useEffect } from \"react\";\n\ntype Position = {\n  x: number;\n  y: number;\n};\ntype DraggableOptions = {\n  onDrag?(pos: Position): void;\n  onDragEnd?(pos: Position): void;\n};\ntype ReturnType<T extends Element> = {\n  position: Position;\n  drag(e: React.MouseEvent<T, MouseEvent>): void;\n};\n\nconst useDraggable = <T extends Element>({\n  onDrag,\n  onDragEnd,\n}: DraggableOptions = {}): ReturnType<T> => {\n  const [pos, setPos] = useState<Position>({ x: 0, y: 0 });\n  const [isDragging, setDragging] = useState<boolean>(false);\n  const handleMouseDown = useCallback(() => setDragging(true), []);\n\n  const handleMouseMove = useCallback(\n    ({ movementX, movementY }: MouseEvent) => {\n      if (!isDragging) return;\n      const translation = {\n        x: pos.x + movementX,\n        y: pos.y + movementY,\n      };\n\n      setPos(translation);\n      onDrag?.(translation);\n    },\n    [isDragging, pos.x, pos.y, onDrag]\n  );\n\n  const handleMouseUp = useCallback(() => {\n    setDragging(false);\n    onDragEnd?.(pos);\n  }, [onDragEnd, pos]);\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleMouseMove);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [handleMouseMove, handleMouseUp]);\n\n  return { position: pos, drag: handleMouseDown };\n};\n\nexport default useDraggable;\n"]},"metadata":{},"sourceType":"module"}