{"ast":null,"code":"var _jsxFileName = \"/Users/mikaelbrevik/Sites/variant/styleguide/web/src/components/svg-blob/index.tsx\";\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport useDraggable from \"./draggable\";\nconst SvgBlob = React.memo(({\n  path,\n  color,\n  size = 100,\n  stroke = \"none\",\n  strokeWidth = 0,\n  svgRef,\n  image,\n  imageScale = 100,\n  imagePositionChanged = () => {}\n}) => {\n  const [imageString, setImageString] = useState();\n  const {\n    position: translation,\n    drag\n  } = useDraggable({\n    onDragEnd: imagePositionChanged\n  });\n  useEffect(function () {\n    if (!image) return setImageString(undefined);\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => setImageString(String(reader.result)));\n    reader.readAsDataURL(image);\n  }, [image]);\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    width: size,\n    height: size,\n    viewBox: `0 0 ${size} ${size}`,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, !imageString ? /*#__PURE__*/React.createElement(\"path\", {\n    stroke: stroke,\n    strokeWidth: strokeWidth,\n    fill: color,\n    d: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"mask\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    stroke: stroke,\n    strokeWidth: strokeWidth,\n    fill: color,\n    d: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"image\", {\n    onMouseDown: drag,\n    clipPath: \"url(#mask)\",\n    height: `${imageScale}%`,\n    width: `${imageScale}%`,\n    x: translation.x,\n    y: translation.y,\n    preserveAspectRatio: \"xMinYMin slice\",\n    xlinkHref: imageString,\n    style: {\n      cursor: \"move\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  })));\n});\nexport default SvgBlob;\nexport async function blobAsString(opts) {\n  if (opts.image) {\n    return blobImageAsString(opts);\n  }\n\n  return blobWithoutImageString(opts);\n}\n\nfunction blobWithoutImageString({\n  path,\n  color,\n  size = 100,\n  stroke = \"none\",\n  strokeWidth = 0\n}) {\n  return `\n    <svg\n      width=\"${size}\"\n      height=\"${size}\"\n      viewBox=\"0 0 ${size} ${size}\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <path stroke=\"${stroke}\" stroke-width=\"${strokeWidth}\" fill=\"${color}\" d=\"${path}\" />\n    </svg>\n`;\n}\n\nasync function blobImageAsString({\n  path,\n  color,\n  size = 100,\n  stroke = \"none\",\n  strokeWidth = 0,\n  image,\n  imageScale = 100,\n  imagePosition = {\n    x: 0,\n    y: 0\n  }\n}) {\n  const imageString = await new Promise(function (res) {\n    if (!image) return res(\"\");\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => res(String(reader.result)));\n    reader.readAsDataURL(image);\n  });\n  return `\n    <svg\n      width=\"${size}\"\n      height=\"${size}\"\n      viewBox=\"0 0 ${size} ${size}\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <clipPath id=\"mask\">\n        <path stroke=\"${stroke}\" stroke-width=\"${strokeWidth}\" fill=\"${color}\" d=\"${path}\" />\n      </clipPath>\n      <image\n        clip-path=\"url(#mask)\"\n        height=\"${imageScale}%\"\n        width=\"${imageScale}%\"\n        x=\"${imagePosition.x}\"\n        y=\"${imagePosition.y}\"\n        preserveAspectRatio=\"xMinYMin slice\"\n        xlink:href=\"${imageString}\"\n      />\n    </svg>\n`;\n}","map":{"version":3,"sources":["/Users/mikaelbrevik/Sites/variant/styleguide/web/src/components/svg-blob/index.tsx"],"names":["React","useState","useEffect","useDraggable","SvgBlob","memo","path","color","size","stroke","strokeWidth","svgRef","image","imageScale","imagePositionChanged","imageString","setImageString","position","translation","drag","onDragEnd","undefined","reader","FileReader","addEventListener","String","result","readAsDataURL","x","y","cursor","blobAsString","opts","blobImageAsString","blobWithoutImageString","imagePosition","Promise","res"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { ValidDefaultColor } from \"../../color-grid/colors\";\nimport { RefObject, useState, useEffect } from \"react\";\nimport useDraggable from \"./draggable\";\n\nexport type SvgBlobProps = {\n  path: string;\n  color: string;\n  size?: number;\n  stroke?: ValidDefaultColor | \"none\";\n  strokeWidth?: number;\n  svgRef?: RefObject<SVGSVGElement> | null;\n  image?: File;\n  imageScale?: number;\n  imagePosition?: { x: number; y: number };\n  imagePositionChanged?(pos: { x: number; y: number }): void;\n};\n\nconst SvgBlob: React.FC<SvgBlobProps> = React.memo(\n  ({\n    path,\n    color,\n    size = 100,\n    stroke = \"none\",\n    strokeWidth = 0,\n    svgRef,\n    image,\n    imageScale = 100,\n    imagePositionChanged = () => {},\n  }) => {\n    const [imageString, setImageString] = useState<string>();\n    const { position: translation, drag } = useDraggable({\n      onDragEnd: imagePositionChanged,\n    });\n\n    useEffect(\n      function () {\n        if (!image) return setImageString(undefined);\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () =>\n          setImageString(String(reader.result))\n        );\n        reader.readAsDataURL(image);\n      },\n      [image]\n    );\n\n    return (\n      <svg\n        ref={svgRef}\n        width={size}\n        height={size}\n        viewBox={`0 0 ${size} ${size}`}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      >\n        {!imageString ? (\n          <path\n            stroke={stroke}\n            strokeWidth={strokeWidth}\n            fill={color}\n            d={path}\n          />\n        ) : (\n          <>\n            <clipPath id=\"mask\">\n              <path\n                stroke={stroke}\n                strokeWidth={strokeWidth}\n                fill={color}\n                d={path}\n              />\n            </clipPath>\n\n            <image\n              onMouseDown={drag}\n              clipPath=\"url(#mask)\"\n              height={`${imageScale}%`}\n              width={`${imageScale}%`}\n              x={translation.x}\n              y={translation.y}\n              preserveAspectRatio=\"xMinYMin slice\"\n              xlinkHref={imageString}\n              style={{ cursor: \"move\" }}\n            />\n          </>\n        )}\n      </svg>\n    );\n  }\n);\nexport default SvgBlob;\n\nexport async function blobAsString(opts: SvgBlobProps) {\n  if (opts.image) {\n    return blobImageAsString(opts);\n  }\n  return blobWithoutImageString(opts);\n}\n\nfunction blobWithoutImageString({\n  path,\n  color,\n  size = 100,\n  stroke = \"none\",\n  strokeWidth = 0,\n}: SvgBlobProps) {\n  return `\n    <svg\n      width=\"${size}\"\n      height=\"${size}\"\n      viewBox=\"0 0 ${size} ${size}\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <path stroke=\"${stroke}\" stroke-width=\"${strokeWidth}\" fill=\"${color}\" d=\"${path}\" />\n    </svg>\n`;\n}\n\nasync function blobImageAsString({\n  path,\n  color,\n  size = 100,\n  stroke = \"none\",\n  strokeWidth = 0,\n  image,\n  imageScale = 100,\n  imagePosition = { x: 0, y: 0 },\n}: SvgBlobProps) {\n  const imageString = await new Promise(function (res) {\n    if (!image) return res(\"\");\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => res(String(reader.result)));\n    reader.readAsDataURL(image);\n  });\n\n  return `\n    <svg\n      width=\"${size}\"\n      height=\"${size}\"\n      viewBox=\"0 0 ${size} ${size}\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    >\n      <clipPath id=\"mask\">\n        <path stroke=\"${stroke}\" stroke-width=\"${strokeWidth}\" fill=\"${color}\" d=\"${path}\" />\n      </clipPath>\n      <image\n        clip-path=\"url(#mask)\"\n        height=\"${imageScale}%\"\n        width=\"${imageScale}%\"\n        x=\"${imagePosition.x}\"\n        y=\"${imagePosition.y}\"\n        preserveAspectRatio=\"xMinYMin slice\"\n        xlink:href=\"${imageString}\"\n      />\n    </svg>\n`;\n}\n"]},"metadata":{},"sourceType":"module"}